/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "com_roco_copymedia_CopyJni.h"

#include <errno.h>
#include <fcntl.h>
#include <stdio.h> 
#include <string.h>
#include <android/log.h>
#define LOG_TAG "CopyJni"
#include <cutils/properties.h>

#define KEY "persist.sys.roco.cpok"
#define COMPANY "roco-mtk-svr"
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG ,__VA_ARGS__)

bool isRocoDevice()
{
	char buf[PROPERTY_VALUE_MAX] ;
	int len = property_get("ro.build.host", buf, "");
	bool result = false;
	if(len > 0){
		result = strcmp(COMPANY,buf) == 0;
	};
	LOGD("result %d",result);
	return result;
}


/* Header for class com_roco_copymedia_CopyJni */
/*
 * Class:     com_roco_copymedia_CopyJni
 * Method:    startProcess
 * Signature: (Landroid/content/Context;)V
 */
JNIEXPORT void JNICALL Java_com_roco_copymedia_CopyJni_startProcess
  (JNIEnv *env, jclass cls, jobject ctx, jstring src, jstring dst)
{
	/**
	jclass FindClass(JNIEnv *env, const char *name);
	*/
	jclass  CopyUtilClz = env->FindClass("com/roco/copymedia/CopyUtil");
	if(CopyUtilClz == NULL){
		LOGD("CopyJni_startProcess can't find CopyUtilClz \n");
		return;
	}

	/*	
	jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz,
	const char *name, const char *sig);
	*/
	jmethodID doCopyMthdId = env->GetStaticMethodID(CopyUtilClz, "doCopy","(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V");
	
	/**
	jstring NewStringUTF(JNIEnv *env, const char *bytes);
	*/
	// jstring src = env->NewStringUTF("/system/vendor_prebuilt");
	// jstring dst = env->NewStringUTF("/storage/sdcard0/vendor_media");

	/*
	NativeType CallStatic<type>Method(JNIEnv *env, jclass clazz,
	jmethodID methodID, ...);
	*/
	env->CallStaticVoidMethod(cls,doCopyMthdId,ctx,src,dst);
}


/*
 * Class:     com_roco_copymedia_CopyJni
 * Method:    doSomething
 * Signature: (Ljava/io/File;Ljava/io/File;)V
 */
JNIEXPORT void JNICALL Java_com_roco_copymedia_CopyJni_doSomething
  (JNIEnv *env, jclass cls, jobject srcFile, jobject dstFile)
{
	jclass FileUtilClz = env->FindClass("com/roco/copymedia/FileUtil");
	if(FileUtilClz == NULL){
		LOGD("CopyJni_doSomethind can't find FileUtilClz \n");
		return;
	}

	jmethodID copyFolderId = env->GetStaticMethodID(FileUtilClz, "copyFolder","(Ljava/io/File;Ljava/io/File;)V");
	env->CallStaticVoidMethod(cls,copyFolderId,srcFile,dstFile);

}


/*
 * Class:     com_roco_copymedia_CopyJni
 * Method:    isCopyDown
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_roco_copymedia_CopyJni_isCopyDown
  (JNIEnv *env, jclass cls)
{
	//get prop persist.sys.roco.cpok
	char buf[PROPERTY_VALUE_MAX] ;
	int len = property_get(KEY, buf, "");

	jboolean result = false;
	if(len > 0){
		result = strcmp("ok",buf) == 0;
	}

	return result;
}


/*
 * Class:     com_roco_copymedia_CopyJni
 * Method:    copyDown
 * Signature: (Landroid/content/Context;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_roco_copymedia_CopyJni_copyDown
  (JNIEnv *env, jclass cls, jobject ctx, jstring dst)
{
	//update media
	/**
	jclass FindClass(JNIEnv *env, const char *name);
	*/
	jclass	CopyUtilClz = env->FindClass("com/roco/copymedia/CopyUtil");
	if(CopyUtilClz == NULL){
		LOGD("CopyJni_startProcess can't find CopyUtilClz \n");
		return;
	}

	/*	
	jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz,
	const char *name, const char *sig);
	*/
	jmethodID updateMediaId = env->GetStaticMethodID(CopyUtilClz, "updateMedia","(Landroid/content/Context;Ljava/lang/String;)V");

	/*
	NativeType CallStatic<type>Method(JNIEnv *env, jclass clazz,
	jmethodID methodID, ...);
	*/
	env->CallStaticVoidMethod(cls,updateMediaId,ctx,dst);

	//set prop persist.sys.roco.cpok
	property_set(KEY, "ok");

}


